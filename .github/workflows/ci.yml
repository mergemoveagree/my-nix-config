name: CI
on:
  workflow_dispatch:
  workflow_run:
    workflows: [Flake]
    types: [completed]
    branches: [update_flake_lock_action]
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  nix-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5
      - name: Install Nix
        uses: DeterminateSystems/determinate-nix-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      #- uses: DeterminateSystems/magic-nix-cache-action@main
      #  with:
      #    diagnostic-endpoint: ''
      #    use-flakehub: false
      - id: set-matrix
        name: Generate Nix Matrix
        run: |
          set -Eeu
          matrix="$(nix eval --json '.#githubActions.matrix' --accept-flake-config)"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

  nix-build:
    name: ${{ matrix.name }} (${{ matrix.system }})
    needs: nix-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.nix-matrix.outputs.matrix )}}
    steps:
      - uses: actions/checkout@v5
      - uses: wimpysworld/nothing-but-nix@main
        with:
          hatchet-protocol: 'holster'
      - name: Install Nix
        uses: DeterminateSystems/determinate-nix-action@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
      #- uses: DeterminateSystems/magic-nix-cache-action@main
      #  with:
      #    diagnostic-endpoint: ''
      #    use-flakehub: false
      - run: nix build -L '.#${{ matrix.attr }}' --accept-flake-config

  nix-build-aggregate:
    runs-on: ubuntu-latest
    needs: nix-build
    steps:
      - run: exit 0

  nix-build-results:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Nix Build Results
    needs: [nix-build, nix-build-aggregate]
    steps:
      - run: exit 1
        if: >-
          ${{
               contains(needs.*.result, 'failure')
            || contains(needs.*.result, 'cancelled')
            || contains(needs.*.result, 'skipped')
          }}
